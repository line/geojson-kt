/*
 * This source file was generated by the Gradle 'init' task
 */
package jp.co.lycorp.geojson.validator

import io.kotest.property.Arb
import io.kotest.property.arbitrary.double
import io.kotest.property.arbitrary.filter
import io.kotest.property.checkAll
import jp.co.lycorp.geojson.Position
import kotlinx.coroutines.test.runTest
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertDoesNotThrow
import org.junit.jupiter.api.assertThrows

class PositionValidatorTest {
    @Test
    fun `should fail when invalid latitude is passed`() = runTest {
        val expected = "Longitude must be between -180 and 180 degrees"

        checkAll(Arb.double().filter { it !in -180.0..180.0 }, Arb.double(-90.0, 90.0)) {
                lng: Double, lat: Double ->
            val err = assertThrows<IllegalArgumentException> { Position(lng, lat) }
            val actual = err.message
            assertEquals(expected, actual)
        }
    }

    @Test
    fun `should fail when invalid longitude is passed`() = runTest {
        val expected = "Latitude must be between -90 and 90 degrees"
        checkAll(Arb.double(-180.0, 180.0), Arb.double().filter { it !in -90.0..90.0 }) {
                lng: Double, lat: Double ->
            val err = assertThrows<IllegalArgumentException> { Position(lng, lat) }
            val actual = err.message
            assertEquals(expected, actual)
        }
    }

    @Test
    fun `should pass validation check when valid position is passed`() = runTest {
        checkAll(Arb.double(-180.0, 180.0), Arb.double(-90.0, 90.0)) {
                lng: Double, lat: Double ->
            assertDoesNotThrow { Position(lng, lat) }
        }
    }
}
