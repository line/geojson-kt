/*
 * This source file was generated by the Gradle 'init' task
 */
package jp.co.lycorp.geojson.validator

import io.kotest.property.Arb
import io.kotest.property.arbitrary.double
import io.kotest.property.arbitrary.filter
import io.kotest.property.checkAll
import jp.co.lycorp.geojson.Polygon
import jp.co.lycorp.geojson.Position
import kotlinx.coroutines.test.runTest
import org.junit.jupiter.api.Assertions.assertDoesNotThrow
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows

class RingIntersectionValidatorTest {

    @Test
    fun `should fail when the interior ring of a Polygon intersects or crosses the exterior ring`() = runTest {
        val border = listOf(
            Position(0.0, 0.0),
            Position(1.0, 0.0),
            Position(1.0, 1.0),
            Position(0.0, 1.0),
            Position(0.0, 0.0),
        )
        val expected = "The interior ring of a Polygon must not intersect or cross the exterior ring."
        checkAll(
            Arb.double(-180.0, 180.0).filter { it !in 0.0..1.0 },
            Arb.double(-90.0, 90.0),
        ) {
                lng: Double, lat: Double ->
            val invalidHole = listOf(
                Position(0.2, 0.2),
                Position(lng, lat),
                Position(1.8, 1.8),
                Position(0.2, 0.8),
                Position(0.2, 0.2),
            )
            val err = assertThrows<IllegalArgumentException> { Polygon(listOf(border, invalidHole)) }
            val actual = err.message
            assertEquals(expected, actual)
        }
    }

    @Test
    fun `should fail when one interior ring encompasses another interior ring`() = runTest {
        val border = listOf(
            Position(-10.0, -10.0),
            Position(10.0, -10.0),
            Position(10.0, 10.0),
            Position(-10.0, 10.0),
            Position(-10.0, -10.0),
        )
        val hole1 = listOf(
            Position(-5.0, -5.0),
            Position(5.0, -5.0),
            Position(5.0, 5.0),
            Position(-5.0, 5.0),
            Position(-5.0, -5.0),
        )
        val hole2 = listOf(
            Position(0.0, 0.0),
            Position(1.0, 0.0),
            Position(1.0, 1.0),
            Position(0.0, 1.0),
            Position(0.0, 0.0),
        )
        val expected = "No two interior rings may intersect, cross, or encompass each other"
        val err = assertThrows<IllegalArgumentException> { Polygon(listOf(border, hole1, hole2)) }
        val actual = err.message
        assertEquals(expected, actual)
    }

    @Test
    fun `should fail when two interior rings intersect each other`() {
        val border = listOf(
            Position(-20.0, -20.0),
            Position(20.0, -20.0),
            Position(20.0, 20.0),
            Position(-20.0, 20.0),
            Position(-20.0, -20.0),
        )
        val hole1 = listOf(
            Position(10.0, 0.0),
            Position(0.0, 10.0),
            Position(-10.0, 0.0),
            Position(0.0, -10.0),
            Position(10.0, 0.0),
        )
        val hole2 = listOf(
            Position(8.0, 8.0),
            Position(-10.0, -3.0),
            Position(8.0, -8.0),
            Position(8.0, 8.0),
        )
        val expected = "No two interior rings may intersect, cross, or encompass each other"
        val err = assertThrows<IllegalArgumentException> { Polygon(listOf(border, hole1, hole2)) }
        val actual = err.message
        assertEquals(expected, actual)
    }

    @Test
    fun `should pass validation check when valid polygon is passed`() {
        val ring = listOf(
            Position(0.0, 0.0),
            Position(1.0, 0.0),
            Position(1.0, 1.0),
            Position(0.0, 1.0),
            Position(0.0, 0.0),
        )
        val hole1 = listOf(
            Position(0.2, 0.2),
            Position(0.5, 0.2),
            Position(0.5, 0.5),
            Position(0.2, 0.5),
            Position(0.2, 0.2),
        )
        val hole2 = listOf(
            Position(0.6, 0.6),
            Position(0.8, 0.5),
            Position(0.8, 0.8),
            Position(0.5, 0.8),
            Position(0.6, 0.6),
        )
        assertDoesNotThrow { Polygon(listOf(ring, hole1, hole2)) }
    }
}
